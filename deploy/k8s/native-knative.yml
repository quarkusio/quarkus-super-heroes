#######################################################################
# THIS FILE IS AUTOMATICALLY GENERATED DURING CI/CD.
# ANY LOCAL CHANGES YOU MAKE SHOULD NOT BE COMMITTED TO SOURCE CONTROL.
#######################################################################

---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: grpc-locations
    application: locations-service
    system: quarkus-super-heroes
  name: grpc-locations-config-creds
data:
  quarkus.datasource.username: bG9jYXRpb25z
  quarkus.datasource.password: bG9jYXRpb25z
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: locations-db
    application: locations-service
    system: quarkus-super-heroes
  name: locations-db-config
data:
  MARIADB_DATABASE: bG9jYXRpb25zX2RhdGFiYXNl
  MARIADB_USER: bG9jYXRpb25z
  MARIADB_PASSWORD: bG9jYXRpb25z
  MARIADB_ROOT_PASSWORD: bG9jYXRpb25z
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: grpc-locations
    application: locations-service
    system: quarkus-super-heroes
  name: grpc-locations-config
data:
  quarkus.hibernate-orm.database.generation: validate
  quarkus.hibernate-orm.sql-load-script: no-file
  quarkus.datasource.jdbc.url: jdbc:mariadb://locations-db:3306/locations_database
  quarkus.otel.exporter.otlp.traces.endpoint: http://otel-collector:4317
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: locations-db
    application: locations-service
    system: quarkus-super-heroes
  name: locations-db-init
data:
  get-data.sh: |-
    #!/bin/bash

    curl https://raw.githubusercontent.com/quarkusio/quarkus-super-heroes/main/grpc-locations/deploy/db-init/initialize-tables.sql --output /docker-entrypoint-startdb.d/1-init-tables.sql
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  annotations:
    app.openshift.io/connects-to: "locations-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    serverless.openshift.io/default-enable-http2: "true"
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:41:19 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8089"
    prometheus.io/scheme: http
  labels:
    app: grpc-locations
    app.openshift.io/runtime: quarkus
    application: locations-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: locations-service
    app.kubernetes.io/name: grpc-locations
    app.kubernetes.io/version: native-latest
  name: grpc-locations
spec:
  template:
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: grpc-locations-config-creds
            - configMapRef:
                name: grpc-locations-config
          image: quay.io/quarkus-super-heroes/grpc-locations:native-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: grpc-locations
          ports:
            - containerPort: 8089
              name: http1
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: locations-db
    application: locations-service
    system: quarkus-super-heroes
  name: locations-db
spec:
  ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
  selector:
    name: locations-db
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: locations-db
    application: locations-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: locations-service
    app.openshift.io/runtime: mariadb
  name: locations-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: locations-db
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: locations-service
        name: locations-db
    spec:
      containers:
        - env:
            - name: MARIADB_SKIP_TEST_DB
              value: "true"
          envFrom:
            - secretRef:
                name: locations-db-config
          image: bitnami/mariadb:10.11
          name: locations-db
          ports:
            - containerPort: 3306
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 64Mi
          volumeMounts:
            - mountPath: /bitnami/mariadb
              name: locations-db-data
            - mountPath: /docker-entrypoint-startdb.d
              name: locations-initdata
      initContainers:
        - command:
            - sh
            - get-data.sh
          image: registry.access.redhat.com/ubi8-minimal:8.6
          name: get-data
          volumeMounts:
            - mountPath: /docker-entrypoint-startdb.d
              name: locations-initdata
            - mountPath: /tmp/dbinit
              name: locations-db-init
          workingDir: /tmp/dbinit
      volumes:
        - emptyDir: {}
          name: locations-db-data
        - emptyDir: {}
          name: locations-initdata
        - configMap:
            name: locations-db-init
          name: locations-db-init
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    app.openshift.io/connects-to: "locations-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    serverless.openshift.io/default-enable-http2: "true"
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:41:19 +0000
  labels:
    app: grpc-locations
    app.openshift.io/runtime: quarkus
    application: locations-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: locations-service
    app.kubernetes.io/name: grpc-locations
    app.kubernetes.io/version: native-latest
  name: grpc-locations
spec:
  selector: {}
  endpoints:
    - scheme: http
      targetPort: 8089
      path: /q/metrics
      interval: 10s
      honorLabels: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rest-narration
    application: narration-service
    system: quarkus-super-heroes
  name: rest-narration-config
data:
  quarkus.otel.exporter.otlp.traces.endpoint: http://otel-collector:4317
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  annotations:
    app.openshift.io/connects-to: otel-collector
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:41:36 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8087"
    prometheus.io/scheme: http
  labels:
    app: rest-narration
    app.openshift.io/runtime: quarkus
    application: narration-service
    system: quarkus-super-heroes
    app.kubernetes.io/name: rest-narration
    app.kubernetes.io/part-of: narration-service
    app.kubernetes.io/version: native-latest
  name: rest-narration
spec:
  template:
    spec:
      containers:
        - envFrom:
            - configMapRef:
                name: rest-narration-config
          image: quay.io/quarkus-super-heroes/rest-narration:native-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: rest-narration
          ports:
            - containerPort: 8087
              name: http1
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    app.openshift.io/connects-to: otel-collector
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:41:36 +0000
  labels:
    app: rest-narration
    app.openshift.io/runtime: quarkus
    application: narration-service
    system: quarkus-super-heroes
    app.kubernetes.io/name: rest-narration
    app.kubernetes.io/part-of: narration-service
    app.kubernetes.io/version: native-latest
  name: rest-narration
spec:
  selector: {}
  endpoints:
    - scheme: http
      targetPort: 8087
      path: /q/metrics
      interval: 10s
      honorLabels: true
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: rest-villains
    application: villains-service
    system: quarkus-super-heroes
  name: rest-villains-config-creds
data:
  quarkus.datasource.username: c3VwZXJiYWQ=
  quarkus.datasource.password: c3VwZXJiYWQ=
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: villains-db
    application: villains-service
    system: quarkus-super-heroes
  name: villains-db-config
data:
  POSTGRESQL_DATABASE: dmlsbGFpbnNfZGF0YWJhc2U=
  POSTGRESQL_USERNAME: c3VwZXJiYWQ=
  POSTGRESQL_PASSWORD: c3VwZXJiYWQ=
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rest-villains
    application: villains-service
    system: quarkus-super-heroes
  name: rest-villains-config
data:
  quarkus.hibernate-orm.database.generation: validate
  quarkus.hibernate-orm.sql-load-script: no-file
  quarkus.datasource.jdbc.url: jdbc:postgresql://villains-db:5432/villains_database
  quarkus.otel.exporter.otlp.traces.endpoint: http://otel-collector:4317
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: villains-db
    application: villains-service
    system: quarkus-super-heroes
  name: villains-db-init
data:
  get-data.sh: |-
    #!/bin/bash

    curl https://raw.githubusercontent.com/quarkusio/quarkus-super-heroes/main/rest-villains/deploy/db-init/initialize-tables.sql --output /docker-entrypoint-initdb.d/1-init-tables.sql
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  annotations:
    app.openshift.io/connects-to: "villains-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:41:54 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8084"
    prometheus.io/scheme: http
  labels:
    app: rest-villains
    app.openshift.io/runtime: quarkus
    application: villains-service
    system: quarkus-super-heroes
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/name: rest-villains
    app.kubernetes.io/part-of: villains-service
  name: rest-villains
spec:
  template:
    spec:
      containers:
        - envFrom:
            - configMapRef:
                name: rest-villains-config
            - secretRef:
                name: rest-villains-config-creds
          image: quay.io/quarkus-super-heroes/rest-villains:native-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: rest-villains
          ports:
            - containerPort: 8084
              name: http1
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: villains-db
    application: villains-service
    system: quarkus-super-heroes
  name: villains-db
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: villains-db
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: villains-db
    application: villains-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: villains-service
    app.openshift.io/runtime: postgresql
  name: villains-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: villains-db
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: villains-service
        name: villains-db
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: villains-db-config
          image: bitnami/postgresql:14
          name: villains-db
          ports:
            - containerPort: 5432
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
          volumeMounts:
            - mountPath: /bitnami/postgresql
              name: villains-db-data
            - mountPath: /docker-entrypoint-initdb.d
              name: villains-db-init-data
      initContainers:
        - command:
            - sh
            - get-data.sh
          image: registry.access.redhat.com/ubi8-minimal:8.6
          name: get-data
          volumeMounts:
            - mountPath: /docker-entrypoint-preinitdb.d
              name: villains-db-init
            - mountPath: /docker-entrypoint-initdb.d
              name: villains-db-init-data
          workingDir: /docker-entrypoint-preinitdb.d
      volumes:
        - emptyDir: {}
          name: villains-db-data
        - emptyDir: {}
          name: villains-db-init-data
        - configMap:
            name: villains-db-init
          name: villains-db-init
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    app.openshift.io/connects-to: "villains-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:41:54 +0000
  labels:
    app: rest-villains
    app.openshift.io/runtime: quarkus
    application: villains-service
    system: quarkus-super-heroes
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/name: rest-villains
    app.kubernetes.io/part-of: villains-service
  name: rest-villains
spec:
  selector: {}
  endpoints:
    - scheme: http
      targetPort: 8084
      path: /q/metrics
      interval: 10s
      honorLabels: true
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: rest-heroes
    application: heroes-service
    system: quarkus-super-heroes
  name: rest-heroes-config-creds
data:
  quarkus.datasource.username: c3VwZXJtYW4=
  quarkus.datasource.password: c3VwZXJtYW4=
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: heroes-db
    application: heroes-service
    system: quarkus-super-heroes
  name: heroes-db-config
data:
  POSTGRESQL_DATABASE: aGVyb2VzX2RhdGFiYXNl
  POSTGRESQL_USERNAME: c3VwZXJtYW4=
  POSTGRESQL_PASSWORD: c3VwZXJtYW4=
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rest-heroes
    application: heroes-service
    system: quarkus-super-heroes
  name: rest-heroes-config
data:
  quarkus.hibernate-orm.database.generation: validate
  quarkus.hibernate-orm.sql-load-script: no-file
  quarkus.datasource.reactive.url: postgresql://heroes-db:5432/heroes_database
  quarkus.otel.exporter.otlp.traces.endpoint: http://otel-collector:4317
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: heroes-db
    application: heroes-service
    system: quarkus-super-heroes
  name: heroes-db-init
data:
  get-data.sh: |-
    #!/bin/bash

    curl https://raw.githubusercontent.com/quarkusio/quarkus-super-heroes/main/rest-heroes/deploy/db-init/initialize-tables.sql --output /docker-entrypoint-initdb.d/1-init-tables.sql
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  annotations:
    app.openshift.io/connects-to: "heroes-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:42:14 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8083"
    prometheus.io/scheme: http
  labels:
    app: rest-heroes
    app.openshift.io/runtime: quarkus
    application: heroes-service
    system: quarkus-super-heroes
    app.kubernetes.io/name: rest-heroes
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/part-of: heroes-service
  name: rest-heroes
spec:
  template:
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: rest-heroes-config-creds
            - configMapRef:
                name: rest-heroes-config
          image: quay.io/quarkus-super-heroes/rest-heroes:native-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: rest-heroes
          ports:
            - containerPort: 8083
              name: http1
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: heroes-db
    application: heroes-service
    system: quarkus-super-heroes
  name: heroes-db
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: heroes-db
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: heroes-db
    application: heroes-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: heroes-service
    app.openshift.io/runtime: postgresql
  name: heroes-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: heroes-db
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        name: heroes-db
        application: heroes-service
        system: quarkus-super-heroes
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: heroes-db-config
          image: bitnami/postgresql:14
          name: heroes-db
          ports:
            - containerPort: 5432
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
          volumeMounts:
            - mountPath: /bitnami/postgresql
              name: heroes-db-data
            - mountPath: /docker-entrypoint-initdb.d
              name: heroes-db-init-data
      initContainers:
        - command:
            - sh
            - get-data.sh
          image: registry.access.redhat.com/ubi8-minimal:8.6
          name: get-data
          volumeMounts:
            - mountPath: /docker-entrypoint-preinitdb.d
              name: heroes-db-init
            - mountPath: /docker-entrypoint-initdb.d
              name: heroes-db-init-data
          workingDir: /docker-entrypoint-preinitdb.d
      volumes:
        - emptyDir: {}
          name: heroes-db-data
        - emptyDir: {}
          name: heroes-db-init-data
        - configMap:
            name: heroes-db-init
          name: heroes-db-init
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    app.openshift.io/connects-to: "heroes-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:42:14 +0000
  labels:
    app: rest-heroes
    app.openshift.io/runtime: quarkus
    application: heroes-service
    system: quarkus-super-heroes
    app.kubernetes.io/name: rest-heroes
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/part-of: heroes-service
  name: rest-heroes
spec:
  selector: {}
  endpoints:
    - scheme: http
      targetPort: 8083
      path: /q/metrics
      interval: 10s
      honorLabels: true
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: rest-fights
    application: fights-service
    system: quarkus-super-heroes
  name: rest-fights-config-creds
data:
  quarkus.mongodb.credentials.username: c3VwZXJmaWdodA==
  quarkus.mongodb.credentials.password: c3VwZXJmaWdodA==
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: fights-db
    application: fights-service
    system: quarkus-super-heroes
  name: fights-db-config
data:
  MONGODB_DATABASE: ZmlnaHRz
  MONGODB_USERNAME: c3VwZXJmaWdodA==
  MONGODB_PASSWORD: c3VwZXJmaWdodA==
  MONGODB_ROOT_USER: c3VwZXI=
  MONGODB_ROOT_PASSWORD: c3VwZXI=
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rest-fights
    application: fights-service
    system: quarkus-super-heroes
  name: rest-fights-config
data:
  quarkus.liquibase-mongodb.migrate-at-start: "false"
  quarkus.mongodb.hosts: fights-db:27017
  quarkus.stork.hero-service.service-discovery.type: knative
  quarkus.stork.hero-service.service-discovery.application: rest-heroes
  quarkus.stork.hero-service.service-discovery.refresh-period: 1M
  quarkus.stork.villain-service.service-discovery.type: knative
  quarkus.stork.villain-service.service-discovery.application: rest-villains
  quarkus.stork.villain-service.service-discovery.refresh-period: 1M
  quarkus.stork.narration-service.service-discovery.type: knative
  quarkus.stork.narration-service.service-discovery.application: rest-narration
  quarkus.stork.narration-service.service-discovery.refresh-period: 1M
  quarkus.otel.exporter.otlp.traces.endpoint: http://otel-collector:4317
  quarkus.grpc.clients.locations.host: grpc-locations
  quarkus.grpc.clients.locations.port: "80"
  kafka.bootstrap.servers: PLAINTEXT://fights-kafka:9092
  mp.messaging.connector.smallrye-kafka.apicurio.registry.url: http://apicurio:8080/apis/registry/v2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default_view
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: view
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  annotations:
    app.openshift.io/connects-to: "fights-db,fights-kafka,apicurio,rest-villains,rest-heroes,rest-narration,grpc-locations,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:42:39 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8082"
    prometheus.io/scheme: http
  labels:
    app: rest-fights
    app.openshift.io/runtime: quarkus
    application: fights-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: fights-service
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/name: rest-fights
  name: rest-fights
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/minScale: "1"
        app.openshift.io/connects-to: "fights-db,fights-kafka,apicurio,rest-villains,rest-heroes,rest-narration,grpc-locations,otel-collector"
        app.openshift.io/vcs-ref: main
        app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
        app.quarkus.io/quarkus-version: 3.11.1
        app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
        app.quarkus.io/build-timestamp: 2024-06-06 - 12:42:39 +0000
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
        prometheus.io/port: "8082"
        prometheus.io/scheme: http
      labels:
        app: rest-fights
        app.openshift.io/runtime: quarkus
        application: fights-service
        system: quarkus-super-heroes
        app.kubernetes.io/part-of: fights-service
        app.kubernetes.io/version: native-latest
        app.kubernetes.io/name: rest-fights
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: rest-fights-config-creds
            - configMapRef:
                name: rest-fights-config
          image: quay.io/quarkus-super-heroes/rest-fights:native-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: rest-fights
          ports:
            - containerPort: 8082
              name: http1
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: fights-db
    application: fights-service
    system: quarkus-super-heroes
  name: fights-db
spec:
  ports:
    - port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    name: fights-db
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: fights-kafka
    application: fights-service
    system: quarkus-super-heroes
  name: fights-kafka
spec:
  ports:
    - port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    name: fights-kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    name: apicurio
    application: fights-service
    system: quarkus-super-heroes
  name: apicurio
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    name: apicurio
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: fights-db
    application: fights-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: fights-service
    app.openshift.io/runtime: mongodb
  name: fights-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: fights-db
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: fights-service
        name: fights-db
        system: quarkus-super-heroes
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: fights-db-config
          image: bitnami/mongodb:5.0
          name: fights-db
          ports:
            - containerPort: 27017
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 64Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: fights-kafka
    application: fights-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: fights-service
    app.openshift.io/runtime: amq
  name: fights-kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      name: fights-kafka
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: fights-service
        name: fights-kafka
        system: quarkus-super-heroes
    spec:
      containers:
        - command:
            - sh
            - -c
            - "export CLUSTER_ID=$(bin/kafka-storage.sh random-uuid) && bin/kafka-storage.sh\
              \ format -t ${CLUSTER_ID} -c config/kraft/server.properties && bin/kafka-server-start.sh\
              \ config/kraft/server.properties --override advertised.listeners=${KAFKA_ADVERTISED_LISTENERS}"
          env:
            - name: LOG_DIR
              value: /tmp/logs
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://fights-kafka:9092
          image: quay.io/strimzi/kafka:0.34.0-kafka-3.4.0
          name: fights-kafka
          ports:
            - containerPort: 9092
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app: apicurio
    application: fights-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: fights-service
    app.kubernetes.io/name: apicurio
    app.kubernetes.io/version: 2.2.3.Final
    app.openshift.io/runtime: apicurio
  name: apicurio
spec:
  replicas: 1
  selector:
    matchLabels:
      name: apicurio
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: fights-service
        name: apicurio
        system: quarkus-super-heroes
    spec:
      containers:
        - env:
            - name: REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED
              value: "true"
          image: quay.io/apicurio/apicurio-registry-mem:2.4.2.Final
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: apicurio
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    app.openshift.io/connects-to: "fights-db,fights-kafka,apicurio,rest-villains,rest-heroes,rest-narration,grpc-locations,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:42:39 +0000
  labels:
    app: rest-fights
    app.openshift.io/runtime: quarkus
    application: fights-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: fights-service
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/name: rest-fights
  name: rest-fights
spec:
  selector: {}
  endpoints:
    - scheme: http
      targetPort: 8082
      path: /q/metrics
      interval: 10s
      honorLabels: true
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: event-statistics
    application: event-stats
    system: quarkus-super-heroes
  name: event-statistics-config-creds
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: event-statistics
    application: event-stats
    system: quarkus-super-heroes
  name: event-statistics-config
data:
  kafka.bootstrap.servers: PLAINTEXT://fights-kafka:9092
  mp.messaging.connector.smallrye-kafka.apicurio.registry.url: http://apicurio:8080/apis/registry/v2
  quarkus.otel.exporter.otlp.traces.endpoint: http://otel-collector:4317
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  annotations:
    app.openshift.io/connects-to: "fights-kafka,apicurio,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:42:57 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8085"
    prometheus.io/scheme: http
  labels:
    app: event-statistics
    app.openshift.io/runtime: quarkus
    application: event-stats
    system: quarkus-super-heroes
    app.kubernetes.io/name: event-statistics
    app.kubernetes.io/part-of: event-stats
    app.kubernetes.io/version: native-latest
  name: event-statistics
spec:
  template:
    spec:
      containers:
        - envFrom:
            - configMapRef:
                name: event-statistics-config
            - secretRef:
                name: event-statistics-config-creds
          image: quay.io/quarkus-super-heroes/event-statistics:native-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: event-statistics
          ports:
            - containerPort: 8085
              name: http1
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: fights-kafka
    application: fights-service
    system: quarkus-super-heroes
  name: fights-kafka
spec:
  ports:
    - port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    name: fights-kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    name: apicurio
    application: fights-service
    system: quarkus-super-heroes
  name: apicurio
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    name: apicurio
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: fights-kafka
    application: fights-service
    app.kubernetes.io/part-of: fights-service
    app.openshift.io/runtime: amq
    system: quarkus-super-heroes
  name: fights-kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      name: fights-kafka
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: fights-service
        name: fights-kafka
        system: quarkus-super-heroes
    spec:
      containers:
        - command:
            - sh
            - -c
            - "export CLUSTER_ID=$(bin/kafka-storage.sh random-uuid) && bin/kafka-storage.sh\
              \ format -t ${CLUSTER_ID} -c config/kraft/server.properties && bin/kafka-server-start.sh\
              \ config/kraft/server.properties --override advertised.listeners=${KAFKA_ADVERTISED_LISTENERS}"
          env:
            - name: LOG_DIR
              value: /tmp/logs
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://fights-kafka:9092
          image: quay.io/strimzi/kafka:0.34.0-kafka-3.4.0
          name: fights-kafka
          ports:
            - containerPort: 9092
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app: apicurio
    application: fights-service
    system: quarkus-super-heroes
    app.kubernetes.io/part-of: fights-service
    app.kubernetes.io/name: apicurio
    app.kubernetes.io/version: 2.2.3.Final
    app.openshift.io/runtime: apicurio
  name: apicurio
spec:
  replicas: 1
  selector:
    matchLabels:
      name: apicurio
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        application: fights-service
        name: apicurio
        system: quarkus-super-heroes
    spec:
      containers:
        - env:
            - name: REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED
              value: "true"
          image: quay.io/apicurio/apicurio-registry-mem:2.4.2.Final
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: apicurio
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    app.openshift.io/connects-to: "fights-kafka,apicurio,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:42:57 +0000
  labels:
    app: event-statistics
    app.openshift.io/runtime: quarkus
    application: event-stats
    system: quarkus-super-heroes
    app.kubernetes.io/name: event-statistics
    app.kubernetes.io/part-of: event-stats
    app.kubernetes.io/version: native-latest
  name: event-statistics
spec:
  selector: {}
  endpoints:
    - scheme: http
      targetPort: 8085
      path: /q/metrics
      interval: 10s
      honorLabels: true
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  annotations:
    app.openshift.io/connects-to: "rest-fights,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:43:14 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app: ui-super-heroes
    app.openshift.io/runtime: quarkus
    application: ui-super-heroes
    system: quarkus-super-heroes
    app.kubernetes.io/name: ui-super-heroes
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/part-of: ui-super-heroes
  name: ui-super-heroes
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/minScale: "1"
        app.openshift.io/connects-to: "rest-fights,otel-collector"
        app.openshift.io/vcs-ref: main
        app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
        app.quarkus.io/quarkus-version: 3.11.1
        app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
        app.quarkus.io/build-timestamp: 2024-06-06 - 12:43:14 +0000
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
      labels:
        app: ui-super-heroes
        app.openshift.io/runtime: quarkus
        application: ui-super-heroes
        system: quarkus-super-heroes
        app.kubernetes.io/name: ui-super-heroes
        app.kubernetes.io/version: native-latest
        app.kubernetes.io/part-of: ui-super-heroes
    spec:
      containers:
        - env:
            - name: CALCULATE_API_BASE_URL
              value: "true"
          image: quay.io/quarkus-super-heroes/ui-super-heroes:native-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: ui-super-heroes
          ports:
            - containerPort: 8080
              name: http1
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: null
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    app.openshift.io/connects-to: "rest-fights,otel-collector"
    app.openshift.io/vcs-ref: main
    app.openshift.io/vcs-url: https://github.com/quarkusio/quarkus-super-heroes
    app.quarkus.io/quarkus-version: 3.11.1
    app.quarkus.io/vcs-uri: https://github.com/quarkusio/quarkus-super-heroes.git
    app.quarkus.io/build-timestamp: 2024-06-06 - 12:43:14 +0000
  labels:
    app: ui-super-heroes
    app.openshift.io/runtime: quarkus
    application: ui-super-heroes
    system: quarkus-super-heroes
    app.kubernetes.io/name: ui-super-heroes
    app.kubernetes.io/version: native-latest
    app.kubernetes.io/part-of: ui-super-heroes
  name: ui-super-heroes
spec:
  selector: {}
  endpoints:
    - scheme: http
      targetPort: 8080
      path: /q/metrics
      interval: 10s
      honorLabels: true
